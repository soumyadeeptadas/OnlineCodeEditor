//importing requirements

import { Component } from "react";





//all the application logic and views in this App Component

class App extends Component {
    pusher: any;
    state: { id: string; html: string; css: string; js: string; };
    channel: any;
  constructor(props: {} | Readonly<{}>) {
    super(props);

    this.state = {
      id: "",
      html: "",
      css: "",
      js: "",

    };

    //creating a pusher instance to allow collaboration, multiple instances can be opened and they can edit and add together
  
    this.channel = this.pusher.subscribe("editor");
  }


  //listen for any update, when updated run and render the code on live view
  componentDidUpdate() {
    this.runCode();
  }

  //after mounting component initialise id of the component with a unique id generated by pushid for each user.
  //if id of the data in use by all users is equal to the source then dont update, else update the states with data.
  componentDidMount() {
    this.setState({
      id: pushid()
    });
    this.channel.bind("text-update", (data: { id: string; html: any; css: any; js: any; }) => {
      const { id } = this.state;
      if (data.id === id) return;

      this.setState({
        html: data.html,
        css: data.css,
        js: data.js
      });
    });
  }

  //keep posting the data on the server and sync it, used axios call to post data, all users are sync with the servers data


  //for rendering code, storing html, css,js from the state, and embedding into a parent html code to render onlive view
  runCode = () => {
    const { html, css, js } = this.state;

    const iframe = this.refs.iframe;
    
    const documentContents = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Document</title>
        <style>
          ${css}
        </style>
      </head>
      <body>
        ${html}

        <script type="text/javascript">
          ${js}
        </script>
      </body>
      </html>
    `;


    document.open();
    document.write(documentContents);
    document.close();
  };


  //function used to toggle and maximize the html,css or js according to click, from file explorer
  loadEditor(dat: string) {
    console.log(dat);
    var classString = dat + "-" + "code";

  }


  //function downloads the actual parent code as a file locally
  downloadCode() {

    const documentContents = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Document</title>
        <style>
          ${this.state.css}
        </style>
      </head>
      <body>
        ${this.state.html}
        <script type="text/javascript">
          ${this.state.js}
        </script>
      </body>
      </html>
    `;

    var element = document.createElement('a');
    element.setAttribute('href', "data:text/plain;charset=UTF-8," + encodeURIComponent(documentContents));
    element.setAttribute('download', "codeSoumyadeeptaDas.txt");
    element.style.display = 'none';
    document.body.appendChild(element);
    element.click(); // simulate click
    document.body.removeChild(element);

  }

  //render
  render() {
    const { html, js, css } = this.state;
    const codeMirrorOptions = {
      theme: "material",
      lineNumbers: true,
      scrollbarStyle: null,
      lineWrapping: true
    };

    return (0);
  }
}

export default App;
function pushid() {
  throw new Error("Function not implemented.");
}

